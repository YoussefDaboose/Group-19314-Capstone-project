#include <OneWire.h>
#include <DallasTemperature.h>
 #include "WiFi.h"
#include "ThingSpeak.h"

#define WIFI_NETWORK "Daboose"
#define WIFI_PASSWORD "d7k pure"
#define WIFI_TIMEOUT_MS 20000

#define CHANNEL_ID 1961472
#define CHANNEL_API_KEY "XVXRS83ZTMXPWZOR"

  WiFiClient client;

const int oneWireBus = 25; // GPIO where the DS18B20 is connected to
 
#define TdsSensorPin 35
#define VREF 3.3      // analog reference voltage(Volt) of the ADC
#define SCOUNT  30           // sum of sample point 
int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0;
int copyIndex = 0;
float averageVoltage = 0;
float tdsValue = 0;
float temperature = 0;

  //WI-FI Connection Code Start
  void connectToWifi(){
    Serial.print("connecting to WIFI...");
    WiFi.mode(WIFI_STA);
    WiFi.begin(WIFI_NETWORK, WIFI_PASSWORD);

    unsigned long startAttemptTime = millis();

    while(WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < WIFI_TIMEOUT_MS){
        Serial.println("Trying to connect to WiFi...");
        delay(100);
    }

    if(WiFi.status() != WL_CONNECTED){
            Serial.println("Failed to connect to this Wi-Fi Network.");
        }else{
            Serial.print("Connected! IP: ");
            Serial.println(WiFi.localIP());
        }
    }
  //WI-FI Connection Code End
 
 
OneWire oneWire(oneWireBus);    // Setup a oneWire instance to communicate with any OneWire devices
 
DallasTemperature sensors(&oneWire);    // Pass our oneWire reference to Dallas Temperature sensor
 
void setup()
{
  Serial.begin(115200);
  pinMode(TdsSensorPin, INPUT);
  sensors.begin();
  {
  Serial.begin(9600);
  connectToWifi();
  ThingSpeak.begin(client);
}
}
 
void loop()
{
  sensors.requestTemperatures();
  float temperature = sensors.getTempCByIndex(0);
 
  static unsigned long analogSampleTimepoint = millis();
  if (millis() - analogSampleTimepoint > 40U)  //every 40 milliseconds,read the analog value from the ADC
  {
    analogSampleTimepoint = millis();
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);    //read the analog value and store into the buffer
    analogBufferIndex++;
    if (analogBufferIndex == SCOUNT)
      analogBufferIndex = 0;
  }
  static unsigned long printTimepoint = millis();
  if (millis() - printTimepoint > 800U)
  {
    printTimepoint = millis();
    for (copyIndex = 0; copyIndex < SCOUNT; copyIndex++)
      analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
    averageVoltage = getMedianNum(analogBufferTemp, SCOUNT) * (float)VREF / 1024.0; // read the analog value more stable by the median filtering algorithm, and convert to voltage value
    float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0); //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
    float compensationVolatge = averageVoltage / compensationCoefficient; //temperature compensation
    tdsValue = (133.42 * compensationVolatge * compensationVolatge * compensationVolatge - 255.86 * compensationVolatge * compensationVolatge + 857.39 * compensationVolatge) * 0.5; //convert voltage value to tds value
 
    Serial.print("TDS Value:");
    Serial.print(tdsValue, 0);
    Serial.println("ppm");
 
    Serial.print("Temperature:");
    Serial.print(temperature);
    Serial.println("ÂºC");
  }
}
int getMedianNum(int bArray[], int iFilterLen)
{
  int bTab[iFilterLen];
  for (byte i = 0; i < iFilterLen; i++)
    bTab[i] = bArray[i];
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++)
  {
    for (i = 0; i < iFilterLen - j - 1; i++)
    {
      if (bTab[i] > bTab[i + 1])
      {
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
      }
    }
  }
  if ((iFilterLen & 1) > 0)
    bTemp = bTab[(iFilterLen - 1) / 2];
  else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  return bTemp;
  ThingSpeak.setField(1, temp);
  ThingSpeak.setField(2, TDS);
  ThingSpeak.writeFields(CHANNEL_ID, CHANNEL_API_KEY);
  
}
